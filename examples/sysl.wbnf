// Sysl grammar

sysl_file -> import* EOL* (application EOL*)+;


// -------------- Imports --------------- //
import  -> "import"  prefix="/"{0,2} import=PATH ( "as"  APP_NAME)? ("~" mode=NAME)? EOL;



// -------------- Applications --------------- //
application ->  APPLICATION_NAME QSTRING?
        attribs? ":" COMMENT* \n+ level=INDENT app_decl:INDENT_SEP;

app_decl   -> SHORTCUT | table | wrap | endpoint | view;

// -------------- Types --------------- //

table -> mode=("!table"|"!type") NAME attribs?  ":" COMMENT*
    \n+ level=INDENT
        (COMMENT | (name=NAME "<:") type=(collection_type|type_spec) optional="?"? attribs?):INDENT_SEP EOL;
wrap -> "!wrap" NAME attribs?  ":" COMMENT*
    \n+ level=INDENT
        (table | "!table"APP_NAME):INDENT_SEP EOL;


type_spec -> (NativeDataTypes | UserType=APP_NAME)
             SizeSpec=("(" \d+ (array=".."|sized=".")? \d* ")")?;
collection_type -> ("set" | "sequence") "of" type_spec;


// -------------- Endpoint     --------------- //

endpoint -> (rest_endpoint | simple_endpoint) EOL;

simple_endpoint -> SHORTCUT | (endpoint_name=(PATH) QSTRING? params? attribs? ":"
                        (SHORTCUT | \n+ level=INDENT stmt:INDENT_SEP));

rest_endpoint -> http_path attribs? ":" \n+ level=INDENT (method_def | rest_endpoint):INDENT_SEP;

method_def -> method=(HTTP_VERBS) params? query_param? attribs? ":" \n+ level=INDENT stmt:INDENT_SEP;

params -> "(" ( reference | field ):"," ")";

query_param -> "?" (Name=(NAME) "=" (NativeDataTypes| NAME | "{" NAME "}") optional="?"?):"&";

field -> NAME (array_size? "<:" (field_type | (\n+ level=INDENT @:INDENT_SEP)) QSTRING?)?;

field_type -> collection_type | (type_spec optional="?"? attribs?) ;

// --------------    views    --------------- //
view -> "!view" NAME "(" view_params? ")"
        ("->" retType=(collection_type|type_spec))?
        attribs? ":" ((\n+ level=INDENT expr_block:INDENT_SEP) | abstract="[~abstract]");

view_params -> (NAME "<:" (collection_type|type_spec)):",";

expr_block -> "";

// --------------    stmt    --------------- //
stmt -> (if_stmt
                | for_stmt
                | ret_stmt
                | call_stmt
                | one_of_stmt
                | http_method_comment=(COMMENT)
                | group_stmt
                | text_stmt
                | annotation
        ) attribs?;

if_else -> if_stmt else_stmt*;

if_stmt -> "if" PREDICATE ":" \n+ level=INDENT stmt:INDENT_SEP;

else_stmt -> "else" PREDICATE? ":" \n+ level=INDENT stmt:INDENT_SEP;

for_stmt -> for_type=("alt" | "until" | "for each" | "for" | "loop" | "while") PREDICATE ":" \n+ level=INDENT stmt:INDENT_SEP;

one_of_stmt -> "one" "of" ":" \n+ level=INDENT one_of_cases:INDENT_SEP;

// TODO: make this simpler
one_of_cases -> one_of_case_label=(QSTRING ":"| NAME ":" | TEXT_LINE ":" | ":")  \n+ level=INDENT stmt:INDENT_SEP;

call_stmt -> target=("." | NAME:"::") "<-" target_endpoint=(TEXT_LINE) call_args?;

call_args -> "(" ((QSTRING | NAME)+ | (NAME "<:" (NAME | NativeDataTypes))):"," ")";

ret_stmt -> "return" ret_val=(TEXT);

group_stmt -> name=(NAME) ":" \n+ level=INDENT stmt:INDENT_SEP;

text_stmt -> doc_string=("|" [^\r\n]*) | QSTRING | app_name=(APPLICATION_NAME) ("<-" NAME)?| SHORTCUT;

// -------------- Common Rules --------------- //
attribs     ->  "[" @:"," "]"
             > pattern=("~" NAME:"+")
             | attr=(NAME "=" QSTRING)
        ;

array_size -> "(" DIGITS ".." DIGITS? ")";

reference -> package_name=(NAME:"::") ("." NAME)+;

annotation -> "@" var_name=(NAME) "=" value=(QSTRING | array_of_strings | multi_line_docstring);

annotations -> \n+ level=INDENT annotation:INDENT_SEP;

array_of_strings -> "[" QSTRING:"," "]";

multi_line_docstring -> ":" \n+ level=INDENT ("|" TEXT):INDENT_SEP;

http_path_var_with_type -> "{" var=(NAME | DIGITS) "<:" type=(NativeDataTypes | NAME | reference) "}";

http_path -> "/" ((http_path_static=(NAME | DIGITS) | http_path_var_with_type):"/")?;

// -------------- Tokens --------------- //
NAME    -> [a-zA-Z_][-a-zA-Z0-9_]*;
PATH    -> /{[a-zA-Z0-9._]*}:"/";
DIGITS -> [1-9][0-9]*;
TEXT -> [^(\r?\n)]+;
TEXT_LINE -> /{\s* ( [^\s:(] [^(\r\n:]* [^\s\r\n(:] )};
APP_NAME -> NAME:".";
PREDICATE -> [^\r\n:]+;
SHORTCUT -> "...";
HTTP_VERBS -> "GET" | "POST" | "DELETE" | "PUT" | "PATCH";
NativeDataTypes -> "int32" | "int64" | "int" |
                "float" | "string" | "date" |
                "bool" | "decimal" | "datetime";
APPLICATION_NAME    -> pkg=(NAME:"::" ".")? APP_NAME;

COMMENT -> "#" [^\n]* "\n";
EOL     -> COMMENT+ | [\_\t]*\n;
QSTRING -> /{"[^"]*"};

.wrapRE -> \n+ | \s+ | /{[\_]*()[\_]*};

INDENT      -> %level="" \s+;
INDENT_SEP  -> \n+ %level;

// indenting needs to be done like the following: \n+ level=INDENT indented:INDENT_SEP
