// Sysl grammar

sysl_file -> import* EOL* (application EOL*)+;


// -------------- Imports --------------- //
import  -> "import"  prefix="/"{0,2} import=PATH ( "as"  APP_NAME)? ("~" mode=NAME)? EOL;



// -------------- Applications --------------- //
application ->  APPLICATION_NAME QSTRING?
        attribs? ":" COMMENT* INDENT app_decl:INDENT_SEP;

app_decl   -> SHORTCUT | table | wrap | endpoint | view;

// -------------- Types --------------- //

table -> mode=("!table"|"!type") NAME attribs?  ":" COMMENT*
    INDENT
        (COMMENT | (name=NAME "<:") type=(collection_type|type_spec) optional="?"? attribs?):INDENT_SEP EOL;
wrap -> "!wrap" NAME attribs?  ":" COMMENT*
    INDENT
        (table | "!table"APP_NAME) :INDENT_SEP EOL;


type_spec -> (NativeDataTypes | UserType=APP_NAME)
             SizeSpec=("(" \d+ (array=".."|sized=".")? \d* ")")?;
collection_type -> ("set" | "sequence") "of" type_spec;


// -------------- Endpoint     --------------- //

endpoint -> (rest_endpoint | simple_endpoint) EOL;

simple_endpoint -> SHORTCUT | (endpoint_name=(PATH) QSTRING? EVERYTHING? attribs? ":" (SHORTCUT | EVERYTHING));

rest_endpoint -> http_path attribs? ":" INDENT (method_def | rest_endpoint)+:INDENT_SEP;

method_def -> http_path=(HTTP_VERBS) params? query_param? attribs? ":" INDENT statements+:INDENT_SEP;

params -> "(" ( reference | field ):"," ")";

query_param -> "?" (Name=(NAME) "=" (NativeDataTypes| NAME | "{" NAME "}") optional="?"?):"&";

field -> NAME (array_size? "<:" field_type QSTRING?)?;

field_type -> collection_type | (type_spec optional="?"? attribs? (":" annotations)?) ;

// --------------    views    --------------- //
view -> "!view" NAME "(" view_params? ")"
        ("->" retType=(collection_type|type_spec))?
        attribs? ":" ((INDENT expr_block:INDENT_SEP) | abstract="[~abstract]");

view_params -> (NAME "<:" (collection_type|type_spec)):",";

expr_block -> "";

// --------------  statements  --------------- //
statements -> (if_stmt
                | for_stmt
                | ret_stmt
                | call_stmt
        ) attribs?;

if_else -> if_stmt else_stmt*;

if_stmt -> "if" PREDICATE ":" INDENT statements*:INDENT_SEP;

else_stmt -> "else" PREDICATE? ":" INDENT statements*:INDENT_SEP;

for_stmt -> for_type=("alt" | "until" | "for each" | "for" | "loop" | "while") PREDICATE ":" INDENT statements*:INDENT_SEP;

call_stmt -> target=("." | NAME:"::") "<-" target_endpoint=(/{ \s* ( [^\s(] [^(\r\n]* [^\s(] ) \s* }) call_args?;

call_args -> "(" ((QSTRING | NAME)+ | (NAME "<:" (NAME | NativeDataTypes))):"," ")";

ret_stmt -> "return" ret_val=(TEXT);

// -------------- Common Rules --------------- //
attribs     ->  "[" @:"," "]"
             > pattern=("~" NAME:"+")
             | attr=(NAME "=" QSTRING)
        ;

array_size -> "(" DIGITS ".." DIGITS? ")";

reference -> package_name=(NAME:"::") ("." NAME)+;

annotations -> INDENT ("@" var_name=(NAME) "=" value=(QSTRING | array_of_strings | multi_line_docstring)):INDENT_SEP;

array_of_strings -> "[" QSTRING:"," "]";

multi_line_docstring -> ":" INDENT ("|" TEXT)+:INDENT_SEP;

http_path_var_with_type -> "{" var=(NAME | DIGITS) "<:" type=(NativeDataTypes | NAME | reference) "}";

http_path -> "/" ((http_path_static=(NAME | DIGITS) | http_path_var_with_type):"/")?;

// -------------- Tokens --------------- //
NAME    -> [a-zA-Z_][-a-zA-Z0-9_]*;
PATH    -> [a-zA-Z0-9.:]*:"/";
DIGITS -> [1-9][0-9]*;
TEXT -> [^(\r?\n)]+;
APP_NAME -> NAME:".";
PREDICATE -> /{[^\r\n:]+};
SHORTCUT -> "...";
HTTP_VERBS -> ("GET" | "POST" | "DELETE" | "PUT" | "PATCH");
NativeDataTypes -> ("int32" | "int64" | "int" |
                "float" | "string" | "date" |
                "bool" | "decimal" | "datetime");
EVERYTHING -> /{[^\n:]+};
APPLICATION_NAME    -> pkg=(NAME:"::" ".")? APP_NAME;

COMMENT -> "#" [^\n]* "\n";
EOL     -> COMMENT+ | [\_\t]*\n;
QSTRING -> /{"[^"]*"};

.wrapRE -> /{[\_]*()[\_]*};

INDENT      -> %INDENT="\n" \s+;
INDENT_SEP  -> %INDENT|\s+;
