.import stmt.wbnf
.import endpoints.wbnf
.import views.wbnf

// Sysl grammar

sysl_file -> COMMENT* import* (COMMENT | application)+;


// -------------- Imports --------------- //
import  -> "import"  prefix=("//"|"/")? PATH ( "as"  APP_NAME)? ("~" mode=NAME)? EOL;


// -------------- Events --------------- //

event  ->  "<->" NAME params? attribs? ":" COMMENT*
        ( SHORTCUT | (\n+ level=INDENT stmt:INDENT_SEP));

// -------------- Applications --------------- //
application ->  APPLICATION_NAME QSTRING?
        attribs? ":" COMMENT* \n+ level=INDENT app_decl:INDENT_SEP;

app_decl   -> annotation
            | COMMENT
            | SHORTCUT
            | type_decl
            | endpoint
            | view;

// -------------- Types --------------- //

type_decl -> table | facade | alias | union;

table -> mode=("!table"|"!type") NAME attribs?  ":" COMMENT*
    \n+ level=INDENT
        (COMMENT | (NAME "<:") type=(collection_type|type_spec) optional="?"? attribs?):INDENT_SEP EOL;
facade -> "!wrap" NAME attribs?  ":" COMMENT*
    \n+ level=INDENT
        (table | "!table"APP_NAME):INDENT_SEP EOL;

alias -> "!alias" NAME attribs?  ":" COMMENT*
        (alias_line | (\n+ level=INDENT  alias_line:INDENT_SEP)) EOL {
        alias_line -> annotation* (collection_type | type_spec);
        };

union -> "!union" NAME attribs?  ":"
    ( SHORTCUT |
        (\n+ level=INDENT
            (COMMENT | type_spec | annotation | SHORTCUT ):INDENT_SEP)
    );

collection_type -> ("set" | "sequence") "of" type_spec;


// -------------- Common Rules --------------- //
attribs     ->  "[" @:"," "]"
             > pattern=("~" NAME:"+")
             | attr=(NAME "=" QSTRING)
        ;

array_size -> "(" DIGITS ".." DIGITS? ")";

annotation -> "@" var_name=(NAME) "=" value=(QSTRING | array_of_strings | multi_line_docstring);

annotations -> \n+ level=INDENT annotation:INDENT_SEP;

array_of_strings -> "[" QSTRING:"," "]";

multi_line_docstring -> ":" \n+ level=INDENT ("|" TEXT):INDENT_SEP;

http_path_var_with_type -> "{" var=(NAME | DIGITS) "<:" type=(NativeDataTypes | NAME | reference=APPLICATION_NAME) "}";

http_path -> "/" ((http_path_static=(NAME | DIGITS) | http_path_var_with_type):"/")?;

type_spec -> (NativeDataTypes | reference=APPLICATION_NAME)
             SizeSpec=("(" \d+ (array=".."|sized=".")? \d* ")")?;

// -------------- Tokens --------------- //
NAME    -> [a-zA-Z_][-a-zA-Z0-9_]*;
PATH    -> /{[a-zA-Z0-9._]*}:"/";
DIGITS -> [1-9][0-9]*;
TEXT -> [^(\r?\n)]+;
TEXT_LINE -> /{\s* ( [^\s:(] [^(\r\n:]* [^\s\r\n(:] )};
APP_NAME -> NAME:".";
PREDICATE -> [^\r\n:]+;
SHORTCUT -> "...";
HTTP_VERBS -> "GET" | "POST" | "DELETE" | "PUT" | "PATCH";
NativeDataTypes -> "int32" | "int64" | "int" |
                "float" | "string" | "datetime" | "date" |
                "bool" | "decimal";

APPLICATION_NAME ->  \s* pkg? appname {
    pkg -> (NAME:"::" ".");
    appname -> APP_NAME:".";

    NAME    -> [a-zA-Z_][-a-zA-Z0-9_]*;
    PATH    -> /{[a-zA-Z0-9._]+}:"/";
    .wrapRE -> /{()};
};

COMMENT_NO_NL -> "#" [^\n]*;
COMMENT -> COMMENT_NO_NL "\n";
EOL     -> COMMENT+ | [\_\t]*\n;
QSTRING -> /{"[^"]*"};

.wrapRE -> \n+ | \s+ | /{[\_]*()[\_]*};

INDENT      -> %level="" \s+;
INDENT_SEP  -> \n+ %level;
